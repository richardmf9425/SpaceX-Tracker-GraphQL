{"version":3,"sources":["components/Launch.js","components/Launches.js","components/LaunchDetails.js","App.js","serviceWorker.js","index.js"],"names":["Launch","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","LAUNCHES_QUERY","gql","Launches","Fragment","query","loading","error","data","console","launches","map","key","Component","LAUNCH_QUERY","LaunchDetails","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","video_link","links","width","height","src","replace","frameborder","allowfullscreen","client","ApolloClient","uri","App","alt","style","padding","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWAIe,SAASA,EAAT,GAAiG,IAAD,IAA9EC,OAAUC,EAAoE,EAApEA,cAAeC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eAC1F,OACC,yBAAKC,UAAU,uBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YACd,wCAAcH,GACd,oCACO,kBAAC,IAAD,CAAQI,OAAO,oBAAoBH,IAE1C,6CACiB,IAChB,0BAAME,UAAWD,EAAiB,eAAiB,eACjDA,EAAiB,UAAY,UAIjC,yBAAKC,UAAU,YACd,kBAAC,IAAD,CAAME,GAAE,kBAAaN,GAAiBI,UAAU,qBAAhD,qB,oNChBL,IAAMG,EAAiBC,IAAH,KAiCLC,EAtBf,iLAEE,OACC,kBAAC,IAAMC,SAAP,KACC,wBAAIN,UAAU,kBAAd,YACA,kBAAC,IAAD,CAAOO,MAAOJ,IACZ,YAA+B,IAA5BK,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACnB,OAAIF,EAAgB,2CAChBC,GAAOE,QAAQF,MAAMA,GAGxB,kBAAC,IAAMH,SAAP,KACEI,EAAKE,SAASC,KAAI,SAAClB,GAAD,OAAY,kBAACD,EAAD,CAAQoB,IAAKnB,EAAOC,cAAeD,OAAQA,iBAZlF,GAA8BoB,a,0ZCX9B,IAAMC,EAAeZ,IAAH,KAqFHa,EAjEf,iLACW,IACHrB,EAAkBsB,KAAKC,MAAMC,MAAMC,OAAnCzB,cAEN,OADAA,EAAgB0B,SAAS1B,GAExB,kBAAC,IAAMU,SAAP,KACC,kBAAC,IAAD,CAAOC,MAAOS,EAAcO,UAAW,CAAE3B,mBACvC,YAA+B,IAA5BY,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACnB,GAAIF,EAAS,OAAO,0CAChBC,GAAOE,QAAQF,MAAMA,GAFK,MAW1BC,EAAKf,OAPRE,EAJ6B,EAI7BA,aACAD,EAL6B,EAK7BA,cACA4B,EAN6B,EAM7BA,YACAzB,EAP6B,EAO7BA,eAP6B,KAQ7BD,kBAR6B,EAS7B2B,QAAUC,EATmB,EASnBA,UAAWC,EATQ,EASRA,YAAaC,EATL,EASKA,YACzBC,EAVoB,EAU7BC,MAASD,WAGV,OACC,6BACC,wBAAI7B,UAAU,kBACb,0BAAMA,UAAU,aAAhB,YADD,IAC8CH,GAE9C,wBAAIG,UAAU,QAAd,mBACA,wBAAIA,UAAU,cACb,wBAAIA,UAAU,mBAAd,mBAAiDJ,GACjD,wBAAII,UAAU,mBAAd,gBAA8CwB,GAE9C,wBAAIxB,UAAU,mBAAd,kBACiB,IAChB,0BAAMA,UAAWD,EAAiB,eAAiB,eACjDA,EAAiB,UAAY,SAGhC,wBAAIC,UAAU,mBACb,4BACC+B,MAAM,MACNC,OAAO,MACPC,IAAKJ,EAAWK,QAAQ,WAAY,UACpCC,YAAY,IACZC,iBAAe,MAIlB,wBAAIpC,UAAU,QAAd,kBACA,wBAAIA,UAAU,cACb,wBAAIA,UAAU,mBAAd,cAA4C0B,GAC5C,wBAAI1B,UAAU,mBAAd,gBAA8C2B,GAC9C,wBAAI3B,UAAU,mBAAd,gBAA8C4B,IAE/C,6BACA,kBAAC,IAAD,CAAM1B,GAAG,IAAIF,UAAU,qBAAvB,iBArDR,GAAmCe,aChB7BsB,G,MAAS,IAAIC,IAAa,CAC/BC,IAAK,cAqBSC,MAlBf,WACC,OACC,kBAAC,IAAD,CAAgBH,OAAQA,GACvB,kBAAC,IAAD,KACC,yBAAKrC,UAAU,aACd,yBACCiC,IAAI,sEACJQ,IAAI,GACJC,MAAO,CAAEX,MAAO,IAAKY,QAAS,GAAIC,QAAS,QAASC,OAAQ,UAE7D,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,yBAAyBC,UAAW/B,QCZvCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCZNiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5081b2c.chunk.js","sourcesContent":["import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Launch({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\r\n\treturn (\r\n\t\t<div className=\"card card-body mb-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-9\">\r\n\t\t\t\t\t<h4>Mission: {mission_name}</h4>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tDate: <Moment format=\"MM-DD-YYYY HH:mm\">{launch_date_local}</Moment>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tMission Status:{' '}\r\n\t\t\t\t\t\t<span className={launch_success ? 'text-success' : 'text-danger'}>\r\n\t\t\t\t\t\t\t{launch_success ? 'Success' : 'Fail'}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-3\">\r\n\t\t\t\t\t<Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\r\n\t\t\t\t\t\tLaunch Details\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport Launch from './Launch';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n\tquery LaunchesQuery {\r\n\t\tlaunches {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_date_local\r\n\t\t\tlaunch_success\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport class Launches extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<h1 className=\"display-4 my-3\">Launches</h1>\r\n\t\t\t\t<Query query={LAUNCHES_QUERY}>\r\n\t\t\t\t\t{({ loading, error, data }) => {\r\n\t\t\t\t\t\tif (loading) return <h4>Loading...</h4>;\r\n\t\t\t\t\t\tif (error) console.error(error);\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t\t\t\t{data.launches.map((launch) => <Launch key={launch.flight_number} launch={launch} />)}\r\n\t\t\t\t\t\t\t</React.Fragment>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Query>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Launches;\r\n","import React, { Component } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n\tquery LaunchQuery($flight_number: Int!) {\r\n\t\tlaunch(flight_number: $flight_number) {\r\n\t\t\tflight_number\r\n\t\t\tmission_name\r\n\t\t\tlaunch_year\r\n\t\t\tlaunch_success\r\n\t\t\tlaunch_date_local\r\n\t\t\trocket {\r\n\t\t\t\trocket_id\r\n\t\t\t\trocket_name\r\n\t\t\t\trocket_type\r\n\t\t\t}\r\n\t\t\tlinks {\r\n\t\t\t\tvideo_link\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport class LaunchDetails extends Component {\r\n\trender() {\r\n\t\tlet { flight_number } = this.props.match.params;\r\n\t\tflight_number = parseInt(flight_number);\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n\t\t\t\t\t{({ loading, error, data }) => {\r\n\t\t\t\t\t\tif (loading) return <h4>loading...</h4>;\r\n\t\t\t\t\t\tif (error) console.error(error);\r\n\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\tmission_name,\r\n\t\t\t\t\t\t\tflight_number,\r\n\t\t\t\t\t\t\tlaunch_year,\r\n\t\t\t\t\t\t\tlaunch_success,\r\n\t\t\t\t\t\t\tlaunch_date_local,\r\n\t\t\t\t\t\t\trocket: { rocket_id, rocket_name, rocket_type },\r\n\t\t\t\t\t\t\tlinks: { video_link }\r\n\t\t\t\t\t\t} = data.launch;\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<h1 className=\"display-4 my-3\">\r\n\t\t\t\t\t\t\t\t\t<span className=\"text-dark\">Mission:</span> {mission_name}\r\n\t\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t\t\t<h4 className=\"mb-3\">Launch Details:</h4>\r\n\t\t\t\t\t\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">Mission Number: {flight_number}</li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t\t\t\tMission Status:{' '}\r\n\t\t\t\t\t\t\t\t\t\t<span className={launch_success ? 'text-success' : 'text-danger'}>\r\n\t\t\t\t\t\t\t\t\t\t\t{launch_success ? 'Success' : 'Fail'}\r\n\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">\r\n\t\t\t\t\t\t\t\t\t\t<iframe\r\n\t\t\t\t\t\t\t\t\t\t\twidth=\"250\"\r\n\t\t\t\t\t\t\t\t\t\t\theight=\"150\"\r\n\t\t\t\t\t\t\t\t\t\t\tsrc={video_link.replace('watch?v=', 'embed/')}\r\n\t\t\t\t\t\t\t\t\t\t\tframeborder=\"0\"\r\n\t\t\t\t\t\t\t\t\t\t\tallowfullscreen\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<h4 className=\"my-3\">Rocket Details</h4>\r\n\t\t\t\t\t\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Link to=\"/\" className=\"btn btn-secondary\">\r\n\t\t\t\t\t\t\t\t\tBack\r\n\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t</Query>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LaunchDetails;\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport LaunchDetails from './components/LaunchDetails';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n\turi: '/graphql'\n});\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<Router>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc=\"https://upload.wikimedia.org/wikipedia/commons/d/de/SpaceX-Logo.svg\"\n\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\tstyle={{ width: 600, padding: 50, display: 'block', margin: 'auto' }}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route exact path=\"/\" component={Launches} />\n\t\t\t\t\t<Route exact path=\"/launch/:flight_number\" component={LaunchDetails} />\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}